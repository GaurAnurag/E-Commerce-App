package com.ecommerce.app.config;
import com.ecommerce.app.security.JwtAuthFilter;
import com.ecommerce.app.security.JwtTokenProvider;
import org.springframework.context.annotation.*;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.cors.*;
import java.util.Arrays;

@Configuration
public class SecurityConfig {
    private final JwtTokenProvider jwtTokenProvider;
    @Value("${app.cors.allowed-origins}")
    private String allowedOrigins;

    public SecurityConfig(JwtTokenProvider jwtTokenProvider){this.jwtTokenProvider=jwtTokenProvider;}

    @Bean
    public JwtAuthFilter jwtAuthFilter(){return new JwtAuthFilter(jwtTokenProvider);}

    @Bean
    public SecurityFilterChain filterChain(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws Exception{
        CorsConfiguration corsConfig = new CorsConfiguration();
        corsConfig.setAllowedOrigins(Arrays.asList(allowedOrigins.split(",")));
        corsConfig.setAllowedMethods(Arrays.asList("GET","POST","PUT","DELETE","OPTIONS"));
        corsConfig.setAllowedHeaders(Arrays.asList("*"));
        corsConfig.setAllowCredentials(true);

        http.cors(cors->cors.configurationSource(req->corsConfig))
                .csrf(csrf->csrf.disable())
                .sessionManagement(sm->sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                	    .requestMatchers(
                	        "/api/auth/**",     // ✅ Public login for both admin + users
                	        "/api/user/**",     // ✅ Public signup
                	        "/api/products/**", // ✅ Public product view
                	        "/uploads/**"       // ✅ Public media access
                	    ).permitAll()
                	    .requestMatchers("/api/admin/**").hasRole("ADMIN") // ✅ Only admin protected
                	    .anyRequest().authenticated()
                	)

                .addFilterBefore(jwtAuthFilter(), UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder(){return new BCryptPasswordEncoder();}

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration cfg) throws Exception{
        return cfg.getAuthenticationManager();
    }
}
