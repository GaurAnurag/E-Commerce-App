package com.ecommerce.app.service;
import com.ecommerce.app.model.*;
import com.ecommerce.app.dto.*;
import com.ecommerce.app.repository.ProductRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.*;

@Service @Transactional
public class ProductService {
    private final ProductRepository productRepository;
    public ProductService(ProductRepository productRepository){this.productRepository=productRepository;}

    public Product createProduct(ProductRequest request){
        Product p = new Product();
        p.setName(request.getName()); p.setDescription(request.getDescription());
        p.setPrice(request.getPrice()); p.setQuantity(request.getQuantity());

        if(request.getImageUrl()!=null && !request.getImageUrl().isBlank()){
            ProductMedia img = new ProductMedia();
            img.setFilename(request.getImageUrl()); img.setContentType("image");
            p.addMedia(img);
        }
        if(request.getVideoUrl()!=null && !request.getVideoUrl().isBlank()){
            ProductMedia vid = new ProductMedia();
            vid.setFilename(request.getVideoUrl()); vid.setContentType("video");
            p.addMedia(vid);
        }
        return productRepository.save(p);
    }

    public Product updateProduct(Long id, ProductUpdateRequest request){
        Product p = productRepository.findById(id).orElseThrow(()->new RuntimeException("Product not found"));
        if(request.getName()!=null) p.setName(request.getName());
        if(request.getDescription()!=null) p.setDescription(request.getDescription());
        if(request.getPrice()!=null) p.setPrice(request.getPrice());
        if(request.getQuantity()!=null) p.setQuantity(request.getQuantity());

        if((request.getImageUrl()!=null && !request.getImageUrl().isBlank()) ||
           (request.getVideoUrl()!=null && !request.getVideoUrl().isBlank())){
            p.getMedia().clear();
            if(request.getImageUrl()!=null && !request.getImageUrl().isBlank()){
                ProductMedia img = new ProductMedia();
                img.setFilename(request.getImageUrl()); img.setContentType("image"); p.addMedia(img);
            }
            if(request.getVideoUrl()!=null && !request.getVideoUrl().isBlank()){
                ProductMedia vid = new ProductMedia();
                vid.setFilename(request.getVideoUrl()); vid.setContentType("video"); p.addMedia(vid);
            }
        }
        return productRepository.save(p);
    }

    public void deleteProduct(Long id){ productRepository.deleteById(id); }
    public List<Product> listAll(){ return productRepository.findAll(); }
    public Optional<Product> getPublic(Long id){ return productRepository.findById(id); }
}
