package com.ecommerce.app.controller;
import com.ecommerce.app.model.Product;
import com.ecommerce.app.service.ProductService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/products")
public class ProductViewController {
    private final ProductService productService;
    public ProductViewController(ProductService productService){this.productService=productService;}

    @GetMapping
    public ResponseEntity<?> listProducts(){
        List<Product> products = productService.listAll();
        List<?> response = products.stream().map(p->{
            return new Object(){
                public Long id = p.getId();
                public String name = p.getName();
                public String description = p.getDescription();
                public Object[] media = p.getMedia().stream().map(m->{
                    return new Object(){ public String url=m.getFilename(); public String type=m.getContentType(); };
                }).toArray();
            };
        }).collect(Collectors.toList());
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getProduct(@PathVariable Long id){
        return productService.getPublic(id).map(p -> {
            return ResponseEntity.ok(new Object() {
                public Long id = p.getId();
                public String name = p.getName();
                public String description = p.getDescription();
                public BigDecimal price = p.getPrice();
                public Integer quantity = p.getQuantity();
                public Object[] media = p.getMedia().stream().map(m -> {
                    return new Object() {
                        public String url = m.getFilename();
                        public String type = m.getContentType();
                    };
                }).toArray();
            });
        }).orElseGet(() -> ResponseEntity.notFound().build());
    }

}
