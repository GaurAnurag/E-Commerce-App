package com.ecommerce.app.controller;

import com.ecommerce.app.service.ProductService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/products")
public class ProductViewController {

    private final ProductService productService;

    public ProductViewController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping
    public ResponseEntity<?> listProducts() {
        var products = productService.listAll().stream()
            .map(p -> Map.of(
                "id", p.getId(),
                "name", p.getName(),
                "description", p.getDescription(),
                "media",
                    p.getMedia() == null
                        ? List.of()
                        : p.getMedia().stream()
                            .map(m -> Map.of(
                                "url", "/uploads/" + m.getFilename(),
                                "type", m.getContentType()
                            ))
                            .toList()
            ))
            .toList();

        return ResponseEntity.ok(products);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getProduct(@PathVariable Long id) {
        return productService.getPublic(id)
            .map(p -> ResponseEntity.ok(Map.of(
                "id", p.getId(),
                "name", p.getName(),
                "description", p.getDescription(),
                "price", p.getPrice(),
                "quantity", p.getQuantity(),
                "media",
                    p.getMedia() == null
                        ? List.of()
                        : p.getMedia().stream()
                            .map(m -> Map.of(
                                "url", "/uploads/" + m.getFilename(),
                                "type", m.getContentType()
                            ))
                            .toList()
            )))
            .orElseGet(() -> ResponseEntity.notFound().build());
    }
}
