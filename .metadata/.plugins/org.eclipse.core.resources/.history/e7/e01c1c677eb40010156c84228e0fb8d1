package com.ecommerce.app.security;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import java.security.Key;
import java.util.Date;
import java.util.Arrays;

@Component
public class JwtTokenProvider {
    @Value("${app.jwt.secret}")
    private String jwtSecret;
    @Value("${app.jwt.expiration-ms}")
    private long jwtExpirationMs;

    private Key getSigningKey(){ return Keys.hmacShaKeyFor(jwtSecret.getBytes()); }

    public String generateToken(String username, String roles){
        Date now = new Date();
        Date exp = new Date(now.getTime()+jwtExpirationMs);
        return Jwts.builder().setSubject(username).claim("roles",roles)
                .setIssuedAt(now).setExpiration(exp)
                .signWith(getSigningKey(),SignatureAlgorithm.HS256).compact();
    }

    public String getUsernameFromJWT(String token){
        return Jwts.parserBuilder().setSigningKey(getSigningKey()).build()
                .parseClaimsJws(token).getBody().getSubject();
    }

    public String getRolesFromJWT(String token){
        return Jwts.parserBuilder().setSigningKey(getSigningKey()).build()
                .parseClaimsJws(token).getBody().get("roles", String.class);
    }

    public boolean validateToken(String token){
        try{
            Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token);
            return true;
        }catch(Exception e){ return false; }
    }
}
